FORMAT: 1A
HOST: https://api-users.lupus.com/

# lupus-users

The users microservice of Lupus in Tabula. This manages all the information about the users and the sessions.

The users information are:
 - user_id
 - username
 - password_hash \*
 - fullname
 - level
 - achievements
 - friends
 - created_by_ip \*
 - created_at \*
 - updated_at \*
 
_\* this field is private and never sent_

## Users Collection [/users]

### Create a New User [POST]

A signup page has to use this API to create a new user. Anyone can create a new user, even if he is not logged in.

+ Request (application/json)
    + Attributes (SignupUser)

+ Response 201 (application/json)
    + Headers
            Location: /users/USERID
    + Attributes (User)
            
+ Response 400 (application/json)
    + Attributes (Error)


## Sessions [/users/sessions]

            
## Current user [/users/me]

### GET the current user [GET]

Fetch the information about the current logged user

+ Request (application/json)
    + Headers
            Authorization: token SESSIONTOKEN
            
+ Response 200 (application/json)
    + Attributes (User)
            
+ Response 400 (application/json)
    + Attributes (Error)
            
### Update the user [PUT]

The user could decide to update its information. The user must be logged in to do that.

The information the user can update are:
- fullname


+ Request (application/json)
    + Headers
            Authorization: token SESSIONTOKEN
    + Attributes (UpdateUser)
        
+ Response 200 (application/json)
    + Headers
            Location: /users/USERID
    + Attributes (User)
            
+ Response 400 (application/json)
    + Attributes (Error)


## Generic user [/users/{user_ids}]

+ Parameters
    + user_ids (string) - Comma separated user ids

### GET some users information [GET]

Get the information about some users at once.

+ Request
    + Headers
            Authorization: token SESSIONTOKEN

+ Response 200 (application/json)
    + Attributes (array[UserShort])

## Data Structures

### User
+ user_id: USERID (string, required)
+ username: edomora97 (string, required)
+ fullname: Edoardo Morassutto (string, required)
+ level: 5 (number, required)
+ achievements (array[Achievement], required)
+ friends (array[UserShort], required)

### UserShort
+ user_id: USERID (string, required)
+ username: edomora97 (string, required)
+ fullname: Edoardo Morassutto (string, required)
+ level: 5 (number, required)

### Achievement
+ achievement_id: ACHIEVEMENTID (string, required)
+ name: La tua prima partita (string),
+ description: Gioca la tua prima partita (string)

### SignupUser
+ username: edomora97 (string, required) - The username of the user
+ password: P@$$W0rd (string, required) - The user's password in plain text
+ fullname: Edoardo Morassutto (string, required) - The name of the user

### UpdateUser
+ fullname: Edoardo Morassutto (string) - The full name to update

### Error
+ error: There was an error (string, required) - The error message